version: "3"
services:
  #ftp service we use ftp tu control all the ubuntu use directory now.
  ftp:
    image:  kinfen/kadm:vsftpd
    ports:
      - "20-21:20-21"
      - "60000-60010:60000-60010"
    networks:
      - webnet
    volumes:
      - volume:/home/kadmftp/volume
      - logs:/home/kadmftp/log
      - jenkins:/home/kadmftp/jenkins
      - nginx:/home/kadmftp/nginx
    environment:
      - FTP_USER=kadmftp
      - FTP_PASS=deadkill
      - PASV_ADDRESS=
      - PASV_MIN=60000
      - PASV_MAX=60010
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.3"
          memory: 200M

  #
  # ftppam:
  #   image:  kinfen/kadm:ftp
  #   ports:
  #     - "30-31:20-21"
  #     - "50000-50010:60000-60010"
  #   networks:
  #     - webnet
  #   volumes:
  #     - "~/shared1:/home/vsftpd/${FTP_USER}/"
  #   environment:
  #     - FTP_USER=kinfen2
  #     - FTP_PASS=deadkill
  #     - PASV_ADDRESS=
  #     - PASV_MIN=60000
  #     - PASV_MAX=60010
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #     resources:
  #       limits:
  #         cpus: "0.5"
  #         memory: 100M
  nginx:
    image:  kinfen/kadm:nginx
    ports:
      - "80:80"
      - "8080-8081:8080-8081"
    networks:
      - webnet
      - innernet
    volumes:
      - nginx:/etc/nginx
      - logs:/var/log
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.2"
          memory: 50M
  apps:
    image:  kinfen/kadm:app_last
    ports:
      - "80"
    networks:
      - webnet
      - innernet
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "1"
          memory: 1G
    entrypoint:
      - node
      - /www/index.js
    environment:
      - MONGOLAB_URL=mongodb://mongo/kadm

  jenkins:
    image:  kinfen/kadm:jenkins
    ports:
      - "8080"
    networks:
      - webnet
      - innernet
    volumes:
      - "jenkins:/var/jenkins_home"
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.8"
          memory: 1G

  agent:
    image:  kinfen/kadm:agent
    depends_on:
      - jenkins
    ports:
      - "22"
    networks:
      - innernet
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - yarncache:/usr/local/share/.cache/yarn/v1
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.8"
          memory: 1G
  mongo:
    image:  kinfen/kadm:mongo
    networks:
      - innernet
    ports:
      - "27017"
    volumes:
      - mongo:/data/db
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.5"
          memory: 500M
  # app:
  #   image:  kinfen/kadm:app_last
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - webnet
  #     - innernet
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #     resources:
  #       limits:
  #         cpus: "0.2"
  #         memory: 100M
  # web:
  #   # replace username/repo:tag with your name and image details
  #   image: kinfen/kadm:nginx
  #   deploy:
  #     replicas: 2
  #     restart_policy:
  #       condition: on-failure
  #     resources:
  #       limits:
  #         cpus: "0.2"
  #         memory: 200M
  #   ports:
  #     - "80:80"
  #   networks:
  #     - webnet
  #   logging:
  #     driver: "json-file"
  visualizer:
    image: dockersamples/visualizer:latest
    ports:
      - "8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
networks:
  webnet:
  innernet:
volumes:
  logs:
  jenkins:
  volume:
  nginx:
  mongo:
  yarncache:
